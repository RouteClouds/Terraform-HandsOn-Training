# Policy: cost-limit.sentinel
# Description: Prevents infrastructure deployments exceeding monthly cost threshold
# Enforcement Level: soft-mandatory
# Version: 1.0

import "tfplan/v2" as tfplan
import "decimal"

# Configuration: Maximum monthly cost in USD
max_monthly_cost = decimal.new(1000)

# EC2 instance pricing (approximate monthly cost in USD)
instance_pricing = {
    "t3.micro":   decimal.new(7.5),
    "t3.small":   decimal.new(15),
    "t3.medium":  decimal.new(30),
    "t3.large":   decimal.new(60),
    "t3.xlarge":  decimal.new(120),
    "t3.2xlarge": decimal.new(240),
    "m5.large":   decimal.new(70),
    "m5.xlarge":  decimal.new(140),
    "m5.2xlarge": decimal.new(280),
    "m5.4xlarge": decimal.new(560),
    "c5.large":   decimal.new(62),
    "c5.xlarge":  decimal.new(124),
    "c5.2xlarge": decimal.new(248),
    "r5.large":   decimal.new(91),
    "r5.xlarge":  decimal.new(182),
}

# RDS instance pricing (approximate monthly cost in USD)
rds_pricing = {
    "db.t3.micro":   decimal.new(12),
    "db.t3.small":   decimal.new(24),
    "db.t3.medium":  decimal.new(48),
    "db.t3.large":   decimal.new(96),
    "db.m5.large":   decimal.new(120),
    "db.m5.xlarge":  decimal.new(240),
    "db.m5.2xlarge": decimal.new(480),
}

# Calculate EC2 instance costs
calculate_ec2_cost = func() {
    cost = decimal.new(0)
    
    for tfplan.resource_changes as address, rc {
        if rc.type == "aws_instance" and
           rc.mode == "managed" and
           (rc.change.actions contains "create" or rc.change.actions contains "update") {
            
            instance_type = rc.change.after.instance_type else "unknown"
            
            if instance_type in keys(instance_pricing) {
                instance_cost = instance_pricing[instance_type]
                cost = decimal.add(cost, instance_cost)
                print("EC2 Instance:", address, "Type:", instance_type, "Cost: $", decimal.string(instance_cost))
            } else {
                print("Warning: Unknown EC2 instance type:", instance_type, "- cost not calculated")
            }
        }
    }
    
    return cost
}

# Calculate RDS instance costs
calculate_rds_cost = func() {
    cost = decimal.new(0)
    
    for tfplan.resource_changes as address, rc {
        if rc.type == "aws_db_instance" and
           rc.mode == "managed" and
           (rc.change.actions contains "create" or rc.change.actions contains "update") {
            
            instance_class = rc.change.after.instance_class else "unknown"
            
            if instance_class in keys(rds_pricing) {
                db_cost = rds_pricing[instance_class]
                cost = decimal.add(cost, db_cost)
                print("RDS Instance:", address, "Class:", instance_class, "Cost: $", decimal.string(db_cost))
            } else {
                print("Warning: Unknown RDS instance class:", instance_class, "- cost not calculated")
            }
        }
    }
    
    return cost
}

# Calculate EBS volume costs (approximate $0.10 per GB-month)
calculate_ebs_cost = func() {
    cost = decimal.new(0)
    cost_per_gb = decimal.new(0.10)
    
    for tfplan.resource_changes as address, rc {
        if rc.type == "aws_ebs_volume" and
           rc.mode == "managed" and
           (rc.change.actions contains "create" or rc.change.actions contains "update") {
            
            size = rc.change.after.size else 0
            volume_cost = decimal.mul(decimal.new(size), cost_per_gb)
            cost = decimal.add(cost, volume_cost)
            print("EBS Volume:", address, "Size:", size, "GB, Cost: $", decimal.string(volume_cost))
        }
    }
    
    return cost
}

# Calculate total infrastructure cost
ec2_cost = calculate_ec2_cost()
rds_cost = calculate_rds_cost()
ebs_cost = calculate_ebs_cost()

total_cost = decimal.add(decimal.add(ec2_cost, rds_cost), ebs_cost)

# Print cost summary
print("\n=== Cost Summary ===")
print("EC2 Instances: $", decimal.string(ec2_cost))
print("RDS Instances: $", decimal.string(rds_cost))
print("EBS Volumes:   $", decimal.string(ebs_cost))
print("Total Monthly: $", decimal.string(total_cost))
print("Cost Limit:    $", decimal.string(max_monthly_cost))
print("===================\n")

# Main rule: Total cost must be less than limit
main = rule {
    decimal.less_than_or_equal(total_cost, max_monthly_cost)
}

# Violation message
violation_message = "Estimated monthly cost ($" + decimal.string(total_cost) + 
                   ") exceeds the limit of $" + decimal.string(max_monthly_cost) + 
                   ". Please review instance types and sizes, or request an exception."

