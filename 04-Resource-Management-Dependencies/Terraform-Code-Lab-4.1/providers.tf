# AWS Terraform Training - Resource Management & Dependencies
# Lab 4.1: Advanced Resource Dependencies and Meta-Arguments
# File: providers.tf - Provider Configuration with Dependency Management

terraform {
  required_version = "~> 1.13.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.12.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.6.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4.0"
    }
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4.0"
    }
    time = {
      source  = "hashicorp/time"
      version = "~> 0.10.0"
    }
  }

  # Remote state backend configuration for dependency management
  # Uncomment and configure for team collaboration
  # backend "s3" {
  #   bucket         = "terraform-state-bucket"
  #   key            = "resource-management/terraform.tfstate"
  #   region         = "us-east-1"
  #   dynamodb_table = "terraform-state-locks"
  #   encrypt        = true
  # }
}

# AWS Provider Configuration with enhanced tagging for dependency tracking
provider "aws" {
  region = var.aws_region

  # Comprehensive default tags for dependency tracking and resource management
  default_tags {
    tags = {
      # Project metadata
      Project              = var.project_name
      Environment          = var.environment
      TrainingModule       = "04-resource-management-dependencies"
      
      # Technical metadata
      ManagedBy            = "terraform"
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      
      # Operational metadata
      Student              = var.student_name
      Owner                = var.owner_email
      CostCenter           = var.cost_center
      CreatedDate          = timestamp()
      
      # Lab-specific metadata
      Lab                  = "resource-management-dependencies"
      LabVersion           = "4.1"
      Workspace            = terraform.workspace
      
      # Dependency tracking metadata
      DependencyTier       = "foundation"
      ResourceCategory     = "infrastructure"
      LifecycleManaged     = "true"
      
      # Cost optimization metadata
      AutoShutdown         = var.auto_shutdown_enabled
      CostOptimization     = var.cost_optimization_level
      
      # Compliance metadata
      DataClassification   = var.data_classification
      BackupRequired       = var.backup_required
      MonitoringEnabled    = var.monitoring_enabled
      EncryptionRequired   = var.encryption_enabled
      
      # Dependency management metadata
      DependencyComplexity = var.dependency_complexity_level
      MetaArgumentsUsed    = "count,for_each,lifecycle,depends_on"
      ResourceOrdering     = "dependency-aware"
    }
  }

  # Ignore specific tags during updates to prevent drift
  ignore_tags {
    keys = [
      "LastAccessed",
      "TemporaryTag",
      "AutoGenerated",
      "LastModified",
      "DynamicTag"
    ]
    
    key_prefixes = [
      "aws:",
      "kubernetes.io/",
      "eks:",
      "auto-",
      "temp-"
    ]
  }

  # Assume role configuration for cross-account dependencies (optional)
  # assume_role {
  #   role_arn     = var.cross_account_role_arn
  #   session_name = "terraform-resource-management"
  # }
}

# Random Provider for unique resource naming and dependency testing
provider "random" {
  # No specific configuration required
}

# Local Provider for file operations and dependency scripts
provider "local" {
  # No specific configuration required
}

# Archive Provider for creating deployment packages with dependencies
provider "archive" {
  # No specific configuration required
}

# Time Provider for dependency timing and lifecycle management
provider "time" {
  # No specific configuration required
}
