name: 'Terraform Dev Deployment'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform-manifests/**'
      - 'environments/dev/**'
      - '.github/workflows/terraform-dev.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VERSION: '1.13.0'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'dev'

jobs:
  terraform:
    name: 'Terraform Dev'
    runs-on: ubuntu-latest
    environment: development
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform-manifests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=../environments/${{ env.ENVIRONMENT }}/backend-config.hcl
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../environments/${{ env.ENVIRONMENT }}/terraform.tfvars -no-color -out=tfplan
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Environment: ${{ env.ENVIRONMENT }}*
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
    
    - name: Post-Deployment Validation
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Running post-deployment validation..."
        terraform output -json > outputs.json
        cat outputs.json
    
    - name: Notify Success
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "‚úÖ Dev environment deployed successfully!"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Commit: ${{ github.sha }}"
    
    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Commit: ${{ github.sha }}"

