# AWS Terraform Training - Terraform CLI & AWS Provider Configuration
# Lab 2.1: Advanced Provider Configuration and Authentication
# File: providers.tf - Comprehensive Provider Configuration

terraform {
  required_version = "~> 1.13.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.12.0"
      
      # Provider configuration aliases for multi-region and cross-account scenarios
      configuration_aliases = [
        aws.primary,
        aws.secondary,
        aws.disaster_recovery,
        aws.development,
        aws.staging,
        aws.production
      ]
    }
    
    random = {
      source  = "hashicorp/random"
      version = "~> 3.6.0"
    }
    
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4.0"
    }
    
    tls = {
      source  = "hashicorp/tls"
      version = "~> 4.0.0"
    }
    
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4.0"
    }
  }

  # Remote state backend configuration
  # This will be configured via backend.hcl file during terraform init
  backend "s3" {
    # Configuration provided via -backend-config flag
    # bucket         = "terraform-state-bucket"
    # key            = "terraform-cli-aws-provider/terraform.tfstate"
    # region         = "us-east-1"
    # dynamodb_table = "terraform-state-locks"
    # encrypt        = true
  }
}

# ============================================================================
# PRIMARY AWS PROVIDER CONFIGURATION
# ============================================================================

# Default AWS Provider - Primary Region
provider "aws" {
  region  = var.aws_region
  profile = var.aws_profile

  # Request configuration for performance optimization
  max_retries                 = var.max_retries
  retry_mode                  = var.retry_mode
  
  # Security configuration
  insecure                    = false
  skip_credentials_validation = false
  skip_metadata_api_check     = false
  skip_region_validation      = false
  skip_requesting_account_id  = false

  # Assume role configuration (optional)
  dynamic "assume_role" {
    for_each = var.assume_role_arn != "" ? [1] : []
    content {
      role_arn     = var.assume_role_arn
      session_name = var.session_name
      external_id  = var.external_id
      duration     = var.session_duration
      policy       = var.assume_role_policy
      
      tags = {
        TerraformSession = "true"
        Environment      = var.environment
        Purpose          = "infrastructure-management"
        Student          = var.student_name
      }
    }
  }

  # Default tags applied to all resources
  default_tags {
    tags = {
      # Project metadata
      Project              = var.project_name
      Environment          = var.environment
      TrainingModule       = "02-terraform-cli-aws-provider"
      
      # Technical metadata
      ManagedBy            = "terraform"
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      
      # Operational metadata
      Student              = var.student_name
      Owner                = var.owner_email
      CostCenter           = var.cost_center
      CreatedDate          = timestamp()
      
      # Authentication metadata
      AuthMethod           = var.auth_method
      AWSProfile           = var.aws_profile
      Region               = var.aws_region
      
      # Compliance metadata
      DataClassification   = var.data_classification
      ComplianceFramework  = var.compliance_framework
      BackupRequired       = var.backup_required
      MonitoringEnabled    = var.monitoring_enabled
      
      # Automation metadata
      AutoShutdown         = var.auto_shutdown_enabled
      CostOptimization     = "enabled"
      Workspace            = terraform.workspace
    }
  }

  # Ignore specific tags during updates to prevent drift
  ignore_tags {
    keys = [
      "LastAccessed",
      "TemporaryTag",
      "AutoGenerated"
    ]
    
    key_prefixes = [
      "aws:",
      "kubernetes.io/",
      "eks:",
      "auto-"
    ]
  }
}

# ============================================================================
# MULTI-REGION PROVIDER CONFIGURATIONS
# ============================================================================

# Secondary Region Provider (us-west-2)
provider "aws" {
  alias   = "secondary"
  region  = var.secondary_region
  profile = var.aws_profile

  max_retries = var.max_retries
  retry_mode  = var.retry_mode

  default_tags {
    tags = {
      Project              = var.project_name
      Environment          = var.environment
      ManagedBy            = "terraform"
      Region               = var.secondary_region
      Purpose              = "secondary-region"
      Student              = var.student_name
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      AuthMethod           = var.auth_method
      Workspace            = terraform.workspace
    }
  }
}

# Disaster Recovery Region Provider (us-west-1)
provider "aws" {
  alias   = "disaster_recovery"
  region  = var.disaster_recovery_region
  profile = var.aws_profile

  max_retries = var.max_retries
  retry_mode  = var.retry_mode

  default_tags {
    tags = {
      Project              = var.project_name
      Environment          = var.environment
      ManagedBy            = "terraform"
      Region               = var.disaster_recovery_region
      Purpose              = "disaster-recovery"
      Student              = var.student_name
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      AuthMethod           = var.auth_method
      Workspace            = terraform.workspace
    }
  }
}

# ============================================================================
# ENVIRONMENT-SPECIFIC PROVIDER CONFIGURATIONS
# ============================================================================

# Development Environment Provider
provider "aws" {
  alias   = "development"
  region  = var.aws_region
  profile = var.development_profile

  max_retries = var.max_retries
  retry_mode  = var.retry_mode

  # Development-specific assume role
  dynamic "assume_role" {
    for_each = var.development_role_arn != "" ? [1] : []
    content {
      role_arn     = var.development_role_arn
      session_name = "terraform-development-session"
      external_id  = var.external_id
      
      tags = {
        Environment = "development"
        Purpose     = "development-infrastructure"
        Student     = var.student_name
      }
    }
  }

  default_tags {
    tags = {
      Project              = var.project_name
      Environment          = "development"
      ManagedBy            = "terraform"
      Student              = var.student_name
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      AuthMethod           = var.auth_method
      Workspace            = terraform.workspace
      CostOptimization     = "aggressive"
    }
  }
}

# Staging Environment Provider
provider "aws" {
  alias   = "staging"
  region  = var.aws_region
  profile = var.staging_profile

  max_retries = var.max_retries
  retry_mode  = var.retry_mode

  # Staging-specific assume role
  dynamic "assume_role" {
    for_each = var.staging_role_arn != "" ? [1] : []
    content {
      role_arn     = var.staging_role_arn
      session_name = "terraform-staging-session"
      external_id  = var.external_id
      
      tags = {
        Environment = "staging"
        Purpose     = "staging-infrastructure"
        Student     = var.student_name
      }
    }
  }

  default_tags {
    tags = {
      Project              = var.project_name
      Environment          = "staging"
      ManagedBy            = "terraform"
      Student              = var.student_name
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      AuthMethod           = var.auth_method
      Workspace            = terraform.workspace
      CostOptimization     = "moderate"
    }
  }
}

# Production Environment Provider
provider "aws" {
  alias   = "production"
  region  = var.aws_region
  profile = var.production_profile

  max_retries = var.max_retries
  retry_mode  = var.retry_mode

  # Production-specific assume role with MFA
  dynamic "assume_role" {
    for_each = var.production_role_arn != "" ? [1] : []
    content {
      role_arn     = var.production_role_arn
      session_name = "terraform-production-session"
      external_id  = var.external_id
      duration     = 3600  # 1 hour for production
      
      tags = {
        Environment = "production"
        Purpose     = "production-infrastructure"
        Student     = var.student_name
        MFARequired = "true"
      }
    }
  }

  default_tags {
    tags = {
      Project              = var.project_name
      Environment          = "production"
      ManagedBy            = "terraform"
      Student              = var.student_name
      TerraformVersion     = "1.13.x"
      ProviderVersion      = "6.12.x"
      AuthMethod           = var.auth_method
      Workspace            = terraform.workspace
      CostOptimization     = "balanced"
      HighAvailability     = "enabled"
      BackupRequired       = "true"
      MonitoringLevel      = "comprehensive"
    }
  }
}

# ============================================================================
# ADDITIONAL PROVIDERS
# ============================================================================

# Random Provider for unique resource naming
provider "random" {
  # No specific configuration required
}

# Local Provider for file operations and data processing
provider "local" {
  # No specific configuration required
}

# TLS Provider for certificate and key generation
provider "tls" {
  # No specific configuration required
}

# Archive Provider for creating deployment packages
provider "archive" {
  # No specific configuration required
}

# ============================================================================
# PROVIDER VALIDATION AND TESTING
# ============================================================================

# Data sources to validate provider configuration
data "aws_caller_identity" "current" {
  # Uses default provider
}

data "aws_caller_identity" "secondary" {
  provider = aws.secondary
}

data "aws_region" "current" {
  # Uses default provider
}

data "aws_region" "secondary" {
  provider = aws.secondary
}

data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_availability_zones" "secondary_available" {
  provider = aws.secondary
  state    = "available"
}
